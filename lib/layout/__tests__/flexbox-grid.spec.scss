@use 'sass:math';

@use '../../test' as *;
@use '../flexbox-grid' as *;
@use '../media' as *;

@include describe('[mixin] grid-container') {
  @include it('sets styles needed to create a container based on a configuration') {
    @include assert {
      @include output {
        @include grid-container;
      }

      @include contains {
        width: 100%;
        max-width: map-get($grid-container-width, xs);
        padding-right: map-get($grid-space-around, xs);
        padding-left: map-get($grid-space-around, xs);
        margin: 0 auto;
      }
    }
  }
}

@include describe('[mixin] grid-row') {
  @include it('sets styles needed to create a row based on a configuration') {
    @include assert {
      @include output {
        @include grid-row;
      }

      @include contains {
        display: flex;
        flex-wrap: wrap;
        margin-right: math.div(map-get($grid-gutter, xs), -2);
        margin-left: math.div(map-get($grid-gutter, xs), -2);
      }
    }
  }
}

@include describe('[mixin] set-grid-column-width') {
  @include it('sets width properties needed for cross browser support') {
    @include assert {
      @include output {
        @include set-grid-column-width(50%);
      }

      @include contains {
        flex-basis: 50%;
        width: 50%;
        max-width: 50%;
      }
    }
  }
}

@include describe('[mixin] set-nested-column-width') {
  @include it('sets width properties needed for cross browser support') {
    @include assert {
      @include output {
        @include set-nested-column-width(4, 9, xs);
      }

      @include contains {
        flex-basis: 44.4444444444%;
        width: 44.4444444444%;
        max-width: 44.4444444444%;
      }
    }
  }
}

@include describe('[function] grid-column-width') {
  @include it('gets column width based on given parameters') {
    @include assert-equal(grid-column-width(md, 4), math.div(4, map-get($grid-columns, default)) * 100%); }
}

@include describe('[mixin] grid-column') {
  @include it('sets base columns properties when there is no `$columns` declared') {
    @include assert {
      @include output {
        @include grid-column;
      }

      @include contains {
        flex-grow: 0;
        flex-shrink: 0;
      }
    }
  }

  @include it('sets columns properties based on a configuration') {
    @include assert {
      @include output {
        @include grid-column((xs: 1));
      }

      @include contains {
        flex-basis: math.div(1, map-get($grid-columns, default)) * 100%;
        width: math.div(1, map-get($grid-columns, default)) * 100%;
        max-width: math.div(1, map-get($grid-columns, default)) * 100%;
        padding-right: map-get($grid-gutter, xs) * 0.5;
        padding-left: map-get($grid-gutter, xs) * 0.5;
      }
    }
  }
}

@include describe('[mixin] grid-offset') {
  @include it('sets `margin-left` property') {
    @include assert {
      @include output {
        @include grid-offset((xs: 1));
      }

      @include expect {
        margin-left: math.div(1, map-get($grid-columns, default)) * 100%;
      }
    }
  }
}
